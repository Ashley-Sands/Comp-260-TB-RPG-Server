# definisons for all protocols python and c#

# Template
Protocol name       : Template
Type                : [identity/info/status/gAction/...]
Protocol identity   : [identity char]
Message Origin      : [Client/Server]
Services            : [serves(S/R)]
Message Action      :
    Server          :
    Client          :
Other Details       :
Data
    - string        from_client_name         nickname of origin
    - [Type]        [name]
    - [Type]        [name]

================================================================================

Protocol name       : server status
Type                : Status
Protocol identity   : !
Message Origin      : server
Services            : ALL (S)
Message Action      :
    Server          : Sent from the server to the client with the current status
                      of the users request.
    Client          :
Other Details       : This will be mostly used for errors.
Status types        :
                (add 'SS_' to start in python)
                - SERVER                  = 0
                - LOBBY_REQUEST           = 1
                - GAME_ENOUGH_PLAYERS     = 2
Data
    - string        from_client_name         nickname of origin
    - int           server_status_type
    - bool          ok
    - string        message

================================================================================

Protocol name       : client status
Type                : Status
Protocol identity   : ?
Message Origin      : server
Services            : ALL (S)
Message Action      :
    Server          : Sent from the client to the server with the current status
                      of the users request.
    Client          :
Other Details       : This will be mostly used for errors.
Status types        :
                (add 'CS_' to start in python)
                - CLIENT            = 0
                - SCENE_LOADED      = 1
                - GAME_READY        = 3
Data
    - string        from_client_name         nickname of origin
    - int           status_type
    - bool          ok
    - string        message

================================================================================

Protocol name       : identity request
Protocol identity   : i
Message Origin      : Server
services            : Auth(S/R), Lobby(R), Game(R)
Message Action      : The request from the auth server for the players id
    Server          : Auth sends an empty request to the client for there identity
                      when received by,
                        Auth : Registers the client into the network
                        Other: Checks that the client has arrived at the correct location
                      Once the clients identity has been receive they are send a identity status update
    Client          : When received fills in the required data and returns it to the server.
Other Details       : Once the user has registered the passthrough will auth the client.
Data
    - string        from_client_name         nickname of origin
    - int           client_id                the unique client id in the server
    - string        nickname                 the nick name of the client
    - string        reg_key                  clients reg key for if they get disconnected

================================================================================

Protocol name       : identity status
Protocol identity   : I
Message Origin      : Server
Services            : Auth(S)
Message Action      :
    Server          : gives the client a status update on there identity
    Client          :
Other Details       :
Data
    - string        from_client_name        SERVER
    - string        client_id               the id of the client in the db
    - string        reg_key                 the clients reg key
    - bool          ok                      status

================================================================================

Protocol name       : lobby list
Type                : Info
Protocol identity   : 'l'               (lower L)
Message Origin      : Server
Services            : lobby(S)
Message Action      : sent from server to the client every 30 odd seconds while the client is connected
    Server          :
    Client          :
Other Details       :
Data
    - string        from_client_name         nickname of origin
    - string[]      lobby_names
    - int[]         lobby_ids
    - int[]         current_clients
    - int[]         max_clients

================================================================================

Protocol name       : SceneRequest
Protocol identity   : s
Message Origin      : Server
Services            : Selector(S)
Message Action      : Sent from the sever to signle a new level to load
    Server          :
    Client          : loads the requested level
Other Details       :
Data
    - string        from_client_name         nickname of origin
    - string        scene_name

================================================================================

Protocol name       : Join lobby Request
Protocol identity   : L
Message Origin      : Client
Services            : Lobbies (R)
Message Action      :
    Client          : Sent from the client to the server to request joining the server
    Server          : Received from client returns a change scene request if ok otherwise
                      returns STATUS message with type lobbyJoin (not ok)
Other Details       :
Data
    - string        from_client_name         nickname of origin
    - int           lobby_id

================================================================================

Protocol name       : Lobby client list
Type                : Info
Protocol identity   : C
Message Origin      : Server
Services            : Lobby (S)
Message Action      :
    Server          : sent from the server to the client with a list of clients including them-self
    Client          :
Other Details       :
Data
    - string        from_client_name         nickname of origin
    - int[]         client_ids
    - string[]      client_nicknames

================================================================================

Protocol name       : Lobby Info
Type                : Info
Protocol identity   : O
Message Origin      : Server
Services            : Lobby(S)
Message Action      :
    Server          : Send lobby info to the client
    Client          :
Other Details       :
Data
    - string        from_client_name         nickname of origin
    - string        level_name
    - int           min_players
    - int           max_players
    - float         start_time              time till start, <0 not ready to start :)

================================================================================

Protocol name       : message
Protocol identity   : m
Message Origin      : Client
Services            : lobby(R/S), game(R/S)
Message Action      : Sent from clients to other clients
    Client          :
    Server          : send to all other clients
Other Details       :
Data
    - string        from_client_name         nickname of origin
    - int[]         to_client_ids            none is all clients
    - string        message

================================================================================

Protocol name       : ping
Protocol identity   : &
Message Origin      : Client
Services            : [serves(S/R)]
Message Action      : Sent from the client to the server
    Server          : where the server then processes and returns the package.
    Client          :
Other Details       :
Data
    - string        from_client_name         nickname of origin
    - double        client_send_time
    - double        server_receive_time

================================================================================

Protocol name       : game client list
Type                : Info
Protocol identity   : G
Message Origin      : Server
Services            : Game (S)
Message Action      :
    Server          : sent from the server to the client with a list of clients that will be
                      taking part in the game
    Client          : received by client to set up the players in the game.
                      the client should then respond with client status GAME_READY ok = True
Other Details       :
Data
    - string        from_client_name         nickname of origin
    - int[]         client_ids
    - string[]      client_nicknames
    - int[]         client_player_ids

================================================================================

Protocol name       : move player
Type                : Game Action
Protocol identity   : M
Message Origin      : Client
Services            : game(S/R)
Message Action      : Sent from the client to the server
    Server          : distrabutes the action among other clients
    Client          :
Other Details       :
Data
    - string        from_client_name        nickname of origin
    - int           player_id
    - float         x                       x position
    - float         y                       y position
    - float         z                       z position

================================================================================

Protocol name       : collect item
Type                : Game Action
Protocol identity   : P
Message Origin      : Client
Services            : game(S/R)
Message Action      :
    Client          : Sent from the client to the server with the item id the the player has collected
    Server          : distrabutes the action among other clients
Other Details       :
Data
    - string        from_client_name        nickname of origin
    - int           player_id
    - int           object_id               server object id

================================================================================

Protocol name       : action
Type                : Game Action
Protocol identity   : A
Message Origin      : Client
Services            : game(S/R)
Message Action      : for game action that only require the player id
    Client          : Sent from the client to the server with the item id the the player has droped
    Server          : distrabutes the action among other clients
Other Details       :
                Game Action types (add GA_ to start in python):
                    - DROP_ITEM          = 0
                    - LAUNCH_PROJECTILE  = 1
                    - END_GAME           = 2
Data
    - string        from_client_name        nickname of origin
    - int           player_id
    - int           action                  game action type

================================================================================

Protocol name       : Explosion
Type                : Game Action
Protocol identity   : E
Message Origin      : Client
Services            : game(R)
Message Action      : Tells the server that an explosion has ocured at location
    Client          : Sent from the client who fired the projectile
    Server          : distrabuted the action among other clients
Other Details       :
Data
    - string        from_client_name        nickname of origin
    - float         x                       x position
    - float         y                       y position
    - float         z                       z position

================================================================================

Protocol name       : Damage
Type                : Game Action
Protocol identity   : D
Message Origin      : Server
Services            : game(S)
Message Action      : tells the clients who get hurt from the explosion
    Server          : sends all the clients the damage that is applied to clients
    Client          : updates the clients that got hurt.
Other Details       : the server works out who and how much damage to apply to each client.
Data
    - string        from_client_name        nickname of origin
    - int           player_id
    - int           health                  remaining health
    - bool          kill

================================================================================

Protocol name       : Look at
Type                : Game Action
Protocol identity   : R
Message Origin      : Server
Services            : game(R)
Message Action      :
    Client          : sent by the client when they look at something
    Server          : sends to all other clients
Other Details       :
Data
    - string        from_client_name        nickname of origin
    - int           player_id
    - float         x
    - float         y
    - float         z

================================================================================

Protocol name       : Build Object
Type                : Game Action
Protocol identity   : B
Message Origin      : Player
Services            : game(S/R)
Message Action      :
    Client          : sent by the client when building an object to request a new object id
    Server          : sends the player the new object id, and regs the object into the game awaiting position update.
Other Details       :
Data
    - string        from_client_name        nickname of origin
    - int           player_id
    - int           type
    - int           obj_id                  new object id

================================================================================

Protocol name       : Game Loop
Type                : Game Action
Protocol identity   : >
Message Origin      : Player
Services            : game(S)
Message Action      :
    Server          : set from the server to the player to change the current player.
    Client          : set the current player
Other Details       :
              Actions types (add GL_ to start in python):
                    - CHANGE = 0
                    - START = 1
                    - END = 2
              Action and time
              time is the amount of time the action will last ie

              CHANGE player [wait 3 secs] ->
              START turn [play 20 secs]   ->
              END turn [wait 5 secs] -> ...

              so this defines the game loop :)
Data
    - string        from_client_name        nickname of origin
    - int           player_id               the player to change to or start/stop playing
    - int           action                  CHANGE / START / STOP
    - int           t                       amount of time the action last for

================================================================================

Protocol name       : Relic Count
Type                : Game Action
Protocol identity   : +
Message Origin      : Server
Services            : game(S)
Message Action      :
    Server          : Updates the client relic count
    Client          : set the player relic count
Other Details       :
Data
    - string        from_client_name        nickname of origin
    - int           player_id               the player to change to or start/stop playing
    - int           count                   relic count

================================================================================

Protocol name       : server object
Type                : Game Action
Protocol identity   : #
Message Origin      : Client
Services            : game(S/R)
Message Action      : updates the position of an object on the server and client.
    Client          : Sent from the client to the server
    Server          : distrabutes the action among other clients
Other Details       : Altho this inherits from BaseProtocol its an action that
                      can only happen in the game
                Object types (add SO_ to start in python):
                    - PLAYER = 0
                    - RELIC = 1
                    - BLOCK = 2

                Action Types (add SOA_ to start in python)
                    - DEFAULT = 0
                    - ADD = 1           # confirms that the object has been added. affter build object request
                    - REMOVE = 2
Data
    - string        from_client_name        nickname of origin
    - int           type                    the object type
    - int           action                  the action for the object
    - int           object_id               the id of the object or if type player the player id
    - float         x                       x position
    - float         y                       y position
    - float         z                       z position
    - float         r_x                     x rotation
    - float         r_y                     y rotation
    - float         r_z                     z rotation

================================================================================